# This file was created by the command:
# steps/nnet3/xconfig_to_configs.py --xconfig-file exp/dihard3_sad_tdnn_stats/configs/network.xconfig --config-dir exp/dihard3_sad_tdnn_stats/configs/
# It contains the entire neural network, but with those
# components that would normally require fixed vectors/matrices
# read from disk, replaced with random initialization
# (this applies to the LDA-like transform and the
# presoftmax-prior-scale, if applicable).  This file
# is used only to work out the left-context and right-context
# of the network.

input-node name=input dim=40
component name=lda type=FixedAffineComponent input-dim=200 output-dim=200
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2))
component name=tdnn1.affine type=NaturalGradientAffineComponent input-dim=200 output-dim=255  max-change=0.75
component-node name=tdnn1.affine component=tdnn1.affine input=lda
component name=tdnn1.relu type=RectifiedLinearComponent dim=255 self-repair-scale=1e-05
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine
component name=tdnn1.renorm type=NormalizeComponent dim=255 target-rms=1.0 add-log-stddev=true
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu
component name=tdnn2.affine type=NaturalGradientAffineComponent input-dim=1024 output-dim=255  max-change=0.75
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2))
component name=tdnn2.relu type=RectifiedLinearComponent dim=255 self-repair-scale=1e-05
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine
component name=tdnn2.renorm type=NormalizeComponent dim=255 target-rms=1.0 add-log-stddev=true
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu
component name=tdnn3.affine type=NaturalGradientAffineComponent input-dim=1024 output-dim=255  max-change=0.75
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6))
component name=tdnn3.relu type=RectifiedLinearComponent dim=255 self-repair-scale=1e-05
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine
component name=tdnn3.renorm type=NormalizeComponent dim=255 target-rms=1.0 add-log-stddev=true
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent input-dim=256 input-period=3 output-period=9 include-variance=false 
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm 
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent input-dim=257 input-period=9 left-context=99 right-context=99 num-log-count-features=1 output-stddevs=false 
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 
component name=tdnn4.affine type=NaturalGradientAffineComponent input-dim=1281 output-dim=255  max-change=0.75
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9))
component name=tdnn4.relu type=RectifiedLinearComponent dim=255 self-repair-scale=1e-05
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine
component name=tdnn4.renorm type=NormalizeComponent dim=255 target-rms=1.0 add-log-stddev=true
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent input-dim=256 input-period=6 output-period=18 include-variance=false 
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm 
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent input-dim=257 input-period=18 left-context=108 right-context=108 num-log-count-features=1 output-stddevs=false 
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 
component name=tdnn5.affine type=NaturalGradientAffineComponent input-dim=1281 output-dim=256  max-change=0.75
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18))
component name=tdnn5.relu type=RectifiedLinearComponent dim=256 self-repair-scale=1e-05
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine
component name=tdnn5.renorm type=NormalizeComponent dim=256 target-rms=1.0 add-log-stddev=false
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu
component name=output.affine type=NaturalGradientAffineComponent input-dim=256 output-dim=3  learning-rate-factor=0.1 max-change=1.5 param-stddev=0.0 bias-stddev=0.0
component-node name=output.affine component=output.affine input=tdnn5.renorm
component name=output.log-softmax type=LogSoftmaxComponent dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine
output-node name=output input=output.log-softmax objective=linear
