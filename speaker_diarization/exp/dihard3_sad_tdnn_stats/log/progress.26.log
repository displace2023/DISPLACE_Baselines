# nnet3-info exp/dihard3_sad_tdnn_stats/26.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/25.raw exp/dihard3_sad_tdnn_stats/26.raw 
# Started at Sat Nov 28 18:27:08 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/26.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000996635, max-change=0.75, linear-params-rms=0.08095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.3,1.4 1.4,1.5,1.7,2.5), mean=1.13, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.6,2.4), mean=1.29, stddev=0.135], bias-{mean,stddev}=-0.08019,0.8807, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.58e+06, self-repaired-proportion=0.873039, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.64,1.1 1.4,2.0,2.0,2.5), mean=0.305, stddev=0.511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.446, stddev=0.481], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.007,0.008,0.01,0.07,0.09 0.10,0.12,0.13,0.15), mean=0.0386, stddev=0.0365], oderiv-count=1.55565e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000996635, max-change=0.75, linear-params-rms=0.05192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.99 1.0,1.0,1.1,1.8,2.5 3.0,3.5,4.0,5.7), mean=1.47, stddev=0.776], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.1,1.3 1.4,1.5,1.6,1.9), mean=0.76, stddev=0.332], bias-{mean,stddev}=-0.01735,0.9792, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.94e+05, self-repaired-proportion=0.0661024, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.005 0.006,0.01,0.05,0.33,1.1 1.8,2.6,3.7,10), mean=0.389, stddev=1.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.08 0.09,0.12,0.22,0.52,0.86 0.93,0.95,0.97,1.0), mean=0.33, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.01,0.02 0.02,0.03,0.03,0.05), mean=0.00682, stddev=0.00703], oderiv-count=497664
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000996635, max-change=0.75, linear-params-rms=0.03507, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,0.97 0.99,1.0,1.1,1.2,1.3 1.4,1.5,1.6,1.8), mean=1.11, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.57,0.69 0.79,0.97,1.1,1.3), mean=0.547, stddev=0.122], bias-{mean,stddev}=0.0365,0.9191, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.89e+05, self-repaired-proportion=0.00365215, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.05,0.07,0.33,1.2,1.8 2.0,2.4,2.6,3.8), mean=0.643, stddev=0.71], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.12 0.17,0.21,0.39,0.76,0.86 0.90,0.92,0.92,0.93), mean=0.458, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.007,0.008 0.009,0.01,0.01,0.02), mean=0.00475, stddev=0.00241], oderiv-count=511488
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000996635, max-change=0.75, linear-params-rms=0.0315, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.99,1.0,1.1,1.2,1.3 1.4,1.5,1.7,1.8), mean=1.12, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.41,0.42 0.43,0.44,0.48,0.55,0.60 0.64,0.68,0.71,0.84), mean=0.498, stddev=0.0702], bias-{mean,stddev}=-0.04707,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.71e+05, self-repaired-proportion=0.000811359, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.04,0.06,0.32,0.87,1.3 1.7,2.1,2.5,3.0), mean=0.519, stddev=0.566], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.11,0.17,0.34,0.58,0.73 0.80,0.85,0.88,0.92), mean=0.386, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.006,0.008,0.01 0.01,0.02,0.02,0.03), mean=0.00691, stddev=0.00343], oderiv-count=332800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000996635, max-change=0.75, linear-params-rms=0.02994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.95,0.95,0.96 0.97,0.98,1.0,1.1,1.3 1.4,1.5,1.5,1.6), mean=1.06, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.44,0.47,0.51,0.54 0.57,0.60,0.63,0.99), mean=0.477, stddev=0.0484], bias-{mean,stddev}=-0.07549,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.81e+04, self-repaired-proportion=0.15185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0002,0.0005,0.01 0.02,0.03,0.22,1.1,1.5 1.9,2.3,2.7,3.6), mean=0.553, stddev=0.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.001,0.003,0.05 0.06,0.10,0.35,0.80,0.95 0.99,1.0,1.0,1.0), mean=0.432, stddev=0.326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,2e-05,5e-05,0.0003 0.0005,0.001,0.005,0.02,0.02 0.03,0.03,0.03,0.06), mean=0.00881, stddev=0.00905], oderiv-count=93296
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=9.96635e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.0363, linear-params-row-norms=[ 0.69 0.63 0.37 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,3e-05,0.0001,0.001 0.002,0.007,0.03,0.08,0.10 0.12,0.15,0.16,0.26), mean=0.0453, stddev=0.0436], bias-{mean,stddev}=2.049e-08,0.02032, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=106624
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/25.raw exp/dihard3_sad_tdnn_stats/26.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.560858 tdnn2.affine:1.19203 tdnn3.affine:0.623689 tdnn4.affine:0.703277 tdnn5.affine:0.847249 output.affine:0.0509207 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.0999 tdnn2.affine:30.7956 tdnn3.affine:23.1698 tdnn4.affine:24.8054 tdnn5.affine:22.2526 output.affine:1.00665 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0243506 tdnn2.affine:0.0390795 tdnn3.affine:0.0270024 tdnn4.affine:0.0284238 tdnn5.affine:0.0381705 output.affine:0.0515016 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:27:08 EST 2020, elapsed time 0 seconds
