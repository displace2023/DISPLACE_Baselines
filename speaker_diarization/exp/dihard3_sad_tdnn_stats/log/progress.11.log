# nnet3-info exp/dihard3_sad_tdnn_stats/11.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/10.raw exp/dihard3_sad_tdnn_stats/11.raw 
# Started at Sat Nov 28 18:25:25 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/11.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.0011141, max-change=0.75, linear-params-rms=0.07327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.94,0.97,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.0764], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.8), mean=1.17, stddev=0.0793], bias-{mean,stddev}=-0.08171,0.9375, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.7e+06, self-repaired-proportion=0.930494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0002,0.70,1.2 1.5,2.1,2.1,2.6), mean=0.335, stddev=0.543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.452, stddev=0.487], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.02,0.08,0.10 0.12,0.13,0.13,0.16), mean=0.0442, stddev=0.0383], oderiv-count=1.50158e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0011141, max-change=0.75, linear-params-rms=0.03946, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.97 0.98,0.99,1.0,1.4,1.7 2.0,2.4,2.5,3.2), mean=1.21, stddev=0.367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,0.75,0.85 0.93,0.99,1.0,1.3), mean=0.611, stddev=0.156], bias-{mean,stddev}=-0.01735,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.14e+05, self-repaired-proportion=0.202751, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.006,0.01,0.05,0.39,0.96 1.4,2.1,2.8,6.8), mean=0.31, stddev=0.729], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.20,0.59,0.92 0.95,0.99,1.0,1.0), mean=0.34, stddev=0.3], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.009,0.02,0.03 0.04,0.05,0.06,0.08), mean=0.014, stddev=0.0122], oderiv-count=508608
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0011141, max-change=0.75, linear-params-rms=0.03245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.2,1.3,1.5), mean=1.04, stddev=0.0675], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.54,0.57 0.61,0.70,0.78,0.98), mean=0.515, stddev=0.0576], bias-{mean,stddev}=0.0364,0.9196, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.7e+05, self-repaired-proportion=0.0643984, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.02,0.04,0.21,0.95,1.2 1.6,1.8,2.2,2.5), mean=0.474, stddev=0.552], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.10 0.12,0.15,0.38,0.82,0.90 0.93,0.94,0.95,0.98), mean=0.468, stddev=0.298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00758, stddev=0.00341], oderiv-count=498816
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.0011141, max-change=0.75, linear-params-rms=0.0292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.3,1.4,1.5), mean=1.04, stddev=0.0798], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.44,0.46,0.49,0.52 0.54,0.57,0.59,0.65), mean=0.465, stddev=0.0381], bias-{mean,stddev}=-0.0472,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.43e+05, self-repaired-proportion=0.0475799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.008,0.01,0.02 0.02,0.04,0.22,0.76,1.1 1.3,1.7,2.0,2.7), mean=0.408, stddev=0.468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.05,0.06,0.08 0.10,0.13,0.35,0.66,0.81 0.87,0.89,0.93,0.95), mean=0.387, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.009,0.01,0.01 0.02,0.02,0.03,0.05), mean=0.00975, stddev=0.00511], oderiv-count=386000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.0011141, max-change=0.75, linear-params-rms=0.02833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.95,0.96 0.96,0.98,1.0,1.0,1.1 1.1,1.2,1.2,1.3), mean=1.01, stddev=0.0601], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.42,0.43,0.45,0.47,0.48 0.50,0.52,0.53,0.78), mean=0.452, stddev=0.0281], bias-{mean,stddev}=-0.0754,0.8835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.9e+04, self-repaired-proportion=0.250065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,4e-06,0.002 0.01,0.03,0.17,0.86,1.3 1.7,2.0,2.2,2.9), mean=0.449, stddev=0.565], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,5e-05,0.009 0.04,0.10,0.34,0.79,0.97 1.0,1.0,1.0,1.0), mean=0.426, stddev=0.334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,1e-07,3e-06,0.0001 0.0005,0.001,0.006,0.02,0.02 0.03,0.04,0.04,0.06), mean=0.00956, stddev=0.0107], oderiv-count=87024
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.00011141, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.02894, linear-params-row-norms=[ 0.54 0.50 0.32 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,2e-07,4e-07,0.0003 0.0009,0.003,0.02,0.07,0.08 0.10,0.12,0.13,0.21), mean=0.0346, stddev=0.0363], bias-{mean,stddev}=-1.242e-09,0.01655, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=100016
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/10.raw exp/dihard3_sad_tdnn_stats/11.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.493141 tdnn2.affine:1.4774 tdnn3.affine:0.755003 tdnn4.affine:0.723031 tdnn5.affine:0.700615 output.affine:0.0428492 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.3519 tdnn2.affine:25.519 tdnn3.affine:22.1573 tdnn4.affine:23.8738 tdnn5.affine:21.553 output.affine:0.802609 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0220883 tdnn2.affine:0.0586841 tdnn3.affine:0.0341678 tdnn4.affine:0.0303562 tdnn5.affine:0.0325598 output.affine:0.0546723 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:25:25 EST 2020, elapsed time 0 seconds
