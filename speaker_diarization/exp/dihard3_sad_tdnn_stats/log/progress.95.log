# nnet3-info exp/dihard3_sad_tdnn_stats/95.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/94.raw exp/dihard3_sad_tdnn_stats/95.raw 
# Started at Sat Nov 28 18:35:16 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/95.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000703168, max-change=0.75, linear-params-rms=0.1143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.99,1.1,2.0,2.2 2.3,2.7,3.8,4.9), mean=1.49, stddev=0.63], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.8,2.0,2.1 2.2,2.3,2.4,3.6), mean=1.81, stddev=0.25], bias-{mean,stddev}=-0.0558,0.6599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.75e+06, self-repaired-proportion=0.632493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.36,0.78 1.1,1.6,1.7,2.1), mean=0.207, stddev=0.391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.434, stddev=0.448], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.006,0.009,0.08,0.09 0.11,0.12,0.15,0.18), mean=0.0399, stddev=0.0393], oderiv-count=1.56681e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000703168, max-change=0.75, linear-params-rms=0.07924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.4,3.1,4.6 5.0,5.4,6.1,7.8), mean=2.11, stddev=1.41], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.54,1.8,2.0 2.2,2.4,2.5,2.8), mean=1.08, stddev=0.662], bias-{mean,stddev}=-0.01749,0.9788, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.07e+05, self-repaired-proportion=0.0123688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.04,0.13,0.58,1.7 3.1,5.0,6.1,9.1), mean=0.597, stddev=1.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.09 0.11,0.15,0.30,0.54,0.78 0.90,0.93,0.95,0.99), mean=0.359, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.006,0.01 0.01,0.02,0.02,0.03), mean=0.00419, stddev=0.00434], oderiv-count=494438
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000703168, max-change=0.75, linear-params-rms=0.04518, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.1,1.1,1.4,1.6,1.8 2.0,2.2,2.3,2.5), mean=1.41, stddev=0.318], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.47,0.47 0.48,0.49,0.52,0.79,1.1 1.3,1.6,1.7,2.1), mean=0.66, stddev=0.292], bias-{mean,stddev}=0.03654,0.9183, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.09,0.12 0.19,0.30,0.70,1.5,2.2 2.7,3.2,3.7,4.2), mean=1.01, stddev=0.854], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.20 0.25,0.30,0.42,0.60,0.70 0.78,0.83,0.85,0.92), mean=0.448, stddev=0.171], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.005 0.006,0.007,0.008,0.01), mean=0.00351, stddev=0.00166], oderiv-count=539136
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000703168, max-change=0.75, linear-params-rms=0.04117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.4,1.7,1.9 2.1,2.3,2.5,2.7), mean=1.43, stddev=0.336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.46,0.48,0.61,0.77,0.88 0.94,1.0,1.1,1.4), mean=0.636, stddev=0.167], bias-{mean,stddev}=-0.04674,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.11,0.18,0.54,1.1,1.4 1.8,2.2,3.1,3.8), mean=0.698, stddev=0.619], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.15 0.18,0.22,0.38,0.52,0.61 0.67,0.71,0.74,0.81), mean=0.385, stddev=0.162], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.008,0.009 0.01,0.01,0.01,0.02), mean=0.00632, stddev=0.00232], oderiv-count=379840
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000703168, max-change=0.75, linear-params-rms=0.04006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.97,0.98 0.99,1.0,1.2,1.8,2.0 2.2,2.4,2.5,2.6), mean=1.37, stddev=0.418], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.43,0.45 0.46,0.49,0.61,0.75,0.81 0.87,0.95,1.0,1.5), mean=0.625, stddev=0.141], bias-{mean,stddev}=-0.07523,0.8836, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.85e+04, self-repaired-proportion=0.00860822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.07,0.35,1.2,1.6 2.0,2.3,2.6,3.9), mean=0.662, stddev=0.695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.08,0.14,0.36,0.70,0.80 0.85,0.90,0.92,0.94), mean=0.41, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0003,0.0003,0.0009 0.001,0.003,0.009,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0104, stddev=0.00773], oderiv-count=95872
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=7.03168e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.06046, linear-params-row-norms=[ 1.2 1.1 0.47 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.004,0.007 0.01,0.03,0.08,0.13,0.17 0.19,0.22,0.26,0.33), mean=0.0865, stddev=0.059], bias-{mean,stddev}=-7.423e-07,0.042, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=110477
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/94.raw exp/dihard3_sad_tdnn_stats/95.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.495465 tdnn2.affine:0.754136 tdnn3.affine:0.447753 tdnn4.affine:0.620851 tdnn5.affine:0.814221 output.affine:0.0494762 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:27.8934 tdnn2.affine:43.4037 tdnn3.affine:27.356 tdnn4.affine:29.0656 tdnn5.affine:26.9729 output.affine:1.67697 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0178008 tdnn2.affine:0.0174139 tdnn3.affine:0.0163955 tdnn4.affine:0.0213969 tdnn5.affine:0.0302548 output.affine:0.0297858 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Sat Nov 28 18:35:17 EST 2020, elapsed time 1 seconds
