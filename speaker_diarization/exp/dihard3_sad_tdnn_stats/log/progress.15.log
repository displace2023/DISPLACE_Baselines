# nnet3-info exp/dihard3_sad_tdnn_stats/15.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/14.raw exp/dihard3_sad_tdnn_stats/15.raw 
# Started at Sat Nov 28 18:25:52 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/15.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00108148, max-change=0.75, linear-params-rms=0.07503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.94,0.98,1.0,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.06, stddev=0.102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2,1.3 1.3,1.4,1.5,2.0), mean=1.19, stddev=0.0961], bias-{mean,stddev}=-0.08166,0.9223, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.89e+06, self-repaired-proportion=0.909004, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0005,0.68,1.2 1.5,2.0,2.1,2.6), mean=0.327, stddev=0.534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.45, stddev=0.485], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.009,0.01,0.01,0.08,0.10 0.11,0.12,0.12,0.14), mean=0.0418, stddev=0.0372], oderiv-count=1.58181e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00108148, max-change=0.75, linear-params-rms=0.04344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.97,0.97 0.98,1.0,1.0,1.5,2.0 2.4,2.8,3.0,4.0), mean=1.29, stddev=0.51], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,0.86,0.99 1.1,1.2,1.2,1.6), mean=0.659, stddev=0.215], bias-{mean,stddev}=-0.01732,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.51e+05, self-repaired-proportion=0.124771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.005 0.007,0.01,0.06,0.33,0.98 1.4,2.1,3.0,8.0), mean=0.333, stddev=0.826], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.12,0.24,0.57,0.84 0.93,0.97,0.99,1.0), mean=0.345, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.02,0.03 0.03,0.04,0.05,0.07), mean=0.0109, stddev=0.0102], oderiv-count=475776
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00108148, max-change=0.75, linear-params-rms=0.03314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.3,1.4,1.6), mean=1.06, stddev=0.0892], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.54,0.61 0.66,0.79,0.88,1.1), mean=0.524, stddev=0.076], bias-{mean,stddev}=0.03644,0.9194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.62e+05, self-repaired-proportion=0.0275783, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.05,0.24,1.1,1.4 1.7,2.0,2.4,3.1), mean=0.522, stddev=0.594], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.13,0.19,0.39,0.81,0.88 0.92,0.93,0.94,0.94), mean=0.467, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.009,0.01 0.01,0.01,0.02,0.02), mean=0.00646, stddev=0.00307], oderiv-count=499392
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00108148, max-change=0.75, linear-params-rms=0.02981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.97,0.97 0.98,0.99,1.0,1.1,1.2 1.2,1.4,1.5,1.6), mean=1.06, stddev=0.1], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.46,0.51,0.54 0.57,0.60,0.62,0.72), mean=0.474, stddev=0.0472], bias-{mean,stddev}=-0.04714,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.18e+05, self-repaired-proportion=0.0205172, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.04,0.24,0.81,1.1 1.5,2.0,2.1,2.6), mean=0.446, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.14,0.35,0.62,0.77 0.85,0.87,0.90,0.94), mean=0.385, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.01,0.01 0.02,0.02,0.02,0.05), mean=0.00864, stddev=0.00436], oderiv-count=329200
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00108148, max-change=0.75, linear-params-rms=0.02868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.2,1.3,1.3,1.4), mean=1.02, stddev=0.0769], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.42,0.43,0.45,0.48,0.50 0.51,0.54,0.55,0.85), mean=0.458, stddev=0.0329], bias-{mean,stddev}=-0.07541,0.8835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.58e+04, self-repaired-proportion=0.225542, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-06,2e-05,0.005 0.01,0.03,0.18,0.93,1.3 1.8,2.1,2.3,3.1), mean=0.475, stddev=0.588], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-05,0.0001,0.02 0.05,0.11,0.33,0.79,0.96 1.0,1.0,1.0,1.0), mean=0.429, stddev=0.332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,2e-06,5e-06,0.0002 0.0005,0.001,0.006,0.02,0.02 0.03,0.04,0.04,0.06), mean=0.0094, stddev=0.0103], oderiv-count=102928
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000108148, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03118, linear-params-row-norms=[ 0.59 0.54 0.33 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,2e-06,7e-06,0.0007 0.002,0.004,0.02,0.07,0.09 0.11,0.13,0.14,0.22), mean=0.0377, stddev=0.0386], bias-{mean,stddev}=1.304e-08,0.01761, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=103488
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/14.raw exp/dihard3_sad_tdnn_stats/15.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.548277 tdnn2.affine:1.39271 tdnn3.affine:0.691289 tdnn4.affine:0.702926 tdnn5.affine:0.736279 output.affine:0.0379453 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.4879 tdnn2.affine:27.1545 tdnn3.affine:22.4216 tdnn4.affine:24.118 tdnn5.affine:21.7025 output.affine:0.864502 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0244289 tdnn2.affine:0.0520545 tdnn3.affine:0.0309238 tdnn4.affine:0.0292201 tdnn5.affine:0.0339871 output.affine:0.0445844 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Sat Nov 28 18:25:53 EST 2020, elapsed time 1 seconds
