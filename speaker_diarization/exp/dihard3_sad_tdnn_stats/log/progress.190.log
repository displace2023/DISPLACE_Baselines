# nnet3-info exp/dihard3_sad_tdnn_stats/190.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/189.raw exp/dihard3_sad_tdnn_stats/190.raw 
# Started at Sat Nov 28 18:46:49 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/190.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000347341, max-change=0.75, linear-params-rms=0.1325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.91,0.92 0.96,0.99,1.1,2.4,2.6 2.9,3.2,4.3,5.3), mean=1.69, stddev=0.819], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,1.8 1.8,1.9,2.1,2.3,2.4 2.5,2.6,2.7,3.8), mean=2.1, stddev=0.262], bias-{mean,stddev}=-0.03875,0.5316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.63e+06, self-repaired-proportion=0.503069, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.006,0.20,0.57 0.91,1.3,1.4,1.8), mean=0.159, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.20,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.429, stddev=0.424], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.02,0.10,0.12 0.13,0.15,0.17,0.22), mean=0.0513, stddev=0.049], oderiv-count=1.51495e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000347341, max-change=0.75, linear-params-rms=0.08918, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.2,1.6,3.8,5.1 5.5,5.9,6.4,7.9), mean=2.39, stddev=1.56], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.46,0.47 0.48,0.49,0.56,2.0,2.2 2.4,2.7,2.8,3.0), mean=1.2, stddev=0.773], bias-{mean,stddev}=-0.01756,0.9787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.33e+05, self-repaired-proportion=0.00502965, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.08,0.22,0.86,1.7 3.1,5.0,6.6,9.0), mean=0.717, stddev=1.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.12,0.18,0.34,0.56,0.75 0.88,0.93,0.94,0.98), mean=0.387, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.008,0.01 0.01,0.02,0.02,0.03), mean=0.00515, stddev=0.00436], oderiv-count=526464
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000347341, max-change=0.75, linear-params-rms=0.05065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.6,1.9,2.0 2.2,2.5,2.5,2.7), mean=1.58, stddev=0.365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.48,0.49 0.50,0.51,0.56,0.94,1.3 1.5,1.8,1.9,2.3), mean=0.728, stddev=0.353], bias-{mean,stddev}=0.03648,0.918, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.15,0.19 0.25,0.39,0.88,1.6,2.0 2.8,3.3,3.7,4.3), mean=1.06, stddev=0.811], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.18,0.22 0.27,0.31,0.41,0.56,0.63 0.74,0.81,0.83,0.92), mean=0.436, stddev=0.151], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.005,0.006,0.007 0.008,0.008,0.01,0.01), mean=0.00513, stddev=0.00183], oderiv-count=542976
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000347341, max-change=0.75, linear-params-rms=0.04712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.3,1.6,1.9,2.1 2.3,2.6,2.8,3.1), mean=1.64, stddev=0.378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.49,0.53,0.71,0.89,1.0 1.1,1.2,1.2,1.6), mean=0.725, stddev=0.201], bias-{mean,stddev}=-0.04671,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.17,0.23,0.54,0.99,1.2 1.5,2.2,2.7,3.3), mean=0.661, stddev=0.524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.15,0.17 0.19,0.23,0.36,0.50,0.55 0.62,0.67,0.69,0.79), mean=0.373, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.009,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0108, stddev=0.00244], oderiv-count=381600
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000347341, max-change=0.75, linear-params-rms=0.04668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.98,0.99 1.0,1.1,1.5,2.1,2.3 2.5,2.8,2.9,2.9), mean=1.59, stddev=0.517], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.48 0.51,0.56,0.73,0.87,0.94 1.0,1.1,1.2,1.6), mean=0.728, stddev=0.168], bias-{mean,stddev}=-0.07543,0.8836, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.82e+04, self-repaired-proportion=0.00821314, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.05,0.10,0.35,0.79,1.1 1.4,1.6,1.9,2.9), mean=0.477, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.10,0.16,0.33,0.54,0.61 0.67,0.74,0.76,0.78), mean=0.351, stddev=0.192], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0008,0.001 0.003,0.007,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0183, stddev=0.0105], oderiv-count=96618.7
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=3.47341e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.0983, linear-params-row-norms=[ 1.9 1.8 0.52 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.008,0.03 0.04,0.07,0.15,0.22,0.25 0.27,0.31,0.34,0.41), mean=0.15, stddev=0.0801], bias-{mean,stddev}=-1.17e-06,0.07705, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=101995
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/189.raw exp/dihard3_sad_tdnn_stats/190.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.267607 tdnn2.affine:0.355813 tdnn3.affine:0.262391 tdnn4.affine:0.418787 tdnn5.affine:0.513787 output.affine:0.0212129 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:31.1098 tdnn2.affine:48.1783 tdnn3.affine:29.7531 tdnn4.affine:31.8783 tdnn5.affine:30.2627 output.affine:2.72745 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.00860681 tdnn2.affine:0.0073894 tdnn3.affine:0.00882352 tdnn4.affine:0.013145 tdnn5.affine:0.0169889 output.affine:0.00781057 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Sat Nov 28 18:46:50 EST 2020, elapsed time 1 seconds
