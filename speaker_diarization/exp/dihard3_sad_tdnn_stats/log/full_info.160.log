# nnet3-info --verbose=2 exp/dihard3_sad_tdnn_stats/160.raw 
# Started at Sat Nov 28 18:43:09 EST 2020
#
nnet3-info --verbose=2 exp/dihard3_sad_tdnn_stats/160.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000384558, max-change=0.75, linear-params-rms=0.1292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.91,0.92 0.96,0.99,1.1,2.3,2.5 2.8,3.1,4.2,5.2), mean=1.65, stddev=0.786], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.7 1.8,1.8,2.0,2.2,2.4 2.4,2.6,2.6,3.8), mean=2.05, stddev=0.263], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.20,0.30 0.39,0.59,1.2,2.4,3.3 4.5,5.5,6.0,6.8), mean=1.6, stddev=1.3], bias-{mean,stddev}=-0.04242,0.5575, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.81e+06, self-repaired-proportion=0.526414, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.23,0.61 0.95,1.4,1.5,1.8), mean=0.168, stddev=0.333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.19,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.429, stddev=0.429], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.008,0.01,0.09,0.11 0.12,0.14,0.17,0.22), mean=0.0482, stddev=0.0466], oderiv-count=1.58076e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000384558, max-change=0.75, linear-params-rms=0.0875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.2,1.5,3.7,5.1 5.5,5.9,6.4,7.9), mean=2.34, stddev=1.54], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.56,2.0,2.2 2.4,2.7,2.8,3.0), mean=1.18, stddev=0.755], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.66 0.72,0.82,1.1,2.0,3.4 5.8,9.5,11,16), mean=1.84, stddev=2.11], bias-{mean,stddev}=-0.01754,0.9787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.62e+05, self-repaired-proportion=0.00486526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.07,0.20,0.74,1.7 3.1,4.9,6.6,9.0), mean=0.696, stddev=1.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.13,0.17,0.34,0.55,0.76 0.87,0.93,0.94,0.98), mean=0.383, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.007,0.01 0.01,0.02,0.02,0.03), mean=0.00485, stddev=0.00437], oderiv-count=522086
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000384558, max-change=0.75, linear-params-rms=0.0496, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.2,1.5,1.8,2.0 2.2,2.5,2.5,2.7), mean=1.55, stddev=0.361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.47,0.48,0.48 0.49,0.51,0.55,0.91,1.2 1.5,1.8,1.9,2.2), mean=0.714, stddev=0.343], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.63 0.70,0.80,1.1,1.6,2.3 3.3,4.1,4.6,5.2), mean=1.35, stddev=0.841], bias-{mean,stddev}=0.0365,0.9181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.14,0.17 0.22,0.39,0.86,1.5,2.1 2.8,3.4,3.7,4.2), mean=1.06, stddev=0.825], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.18,0.21 0.26,0.31,0.41,0.56,0.65 0.74,0.81,0.83,0.92), mean=0.438, stddev=0.155], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.005,0.006,0.007 0.007,0.008,0.009,0.01), mean=0.00461, stddev=0.0018], oderiv-count=540518
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000384558, max-change=0.75, linear-params-rms=0.04592, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.3,1.5,1.8,2.1 2.2,2.6,2.8,3.0), mean=1.6, stddev=0.376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.47 0.48,0.52,0.68,0.87,0.98 1.1,1.2,1.2,1.5), mean=0.706, stddev=0.196], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.70,0.74 0.80,0.90,1.2,1.9,2.4 3.0,3.7,4.2,5.1), mean=1.46, stddev=0.753], bias-{mean,stddev}=-0.04672,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.14 0.15,0.23,0.55,1.0,1.3 1.6,2.2,2.8,3.4), mean=0.68, stddev=0.551], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.15,0.17 0.19,0.22,0.37,0.51,0.57 0.62,0.68,0.70,0.78), mean=0.377, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.007,0.009,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00938, stddev=0.00242], oderiv-count=363840
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000384558, max-change=0.75, linear-params-rms=0.0454, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.99 1.0,1.1,1.4,2.0,2.3 2.5,2.8,2.8,2.9), mean=1.54, stddev=0.505], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.46,0.47 0.50,0.54,0.70,0.85,0.92 0.98,1.1,1.1,1.6), mean=0.707, stddev=0.167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.71 0.77,0.87,1.2,1.9,2.4 3.0,3.6,4.1,5.0), mean=1.44, stddev=0.757], bias-{mean,stddev}=-0.07529,0.8837, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.99e+04, self-repaired-proportion=0.00651383, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.05,0.09,0.34,0.91,1.2 1.5,1.8,2.0,3.2), mean=0.529, stddev=0.518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.10,0.16,0.34,0.58,0.65 0.72,0.78,0.80,0.83), mean=0.367, stddev=0.21], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0007,0.001 0.003,0.006,0.02,0.02,0.03 0.03,0.04,0.04,0.05), mean=0.0156, stddev=0.00942], oderiv-count=96857.6
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=3.84558e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.0873, linear-params-row-norms=[ 1.7 1.6 0.51 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.007,0.02 0.03,0.06,0.13,0.19,0.22 0.25,0.29,0.31,0.39), mean=0.132, stddev=0.0734], linear-params-singular-values=[ 2.3 0.62 2e-05 ], bias-{mean,stddev}=-1.168e-06,0.06761, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=99097.6
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:43:09 EST 2020, elapsed time 0 seconds
