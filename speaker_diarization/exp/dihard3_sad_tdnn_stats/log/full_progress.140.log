# nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/139.raw exp/dihard3_sad_tdnn_stats/140.raw 
# Started at Sat Nov 28 18:40:44 EST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/139.raw exp/dihard3_sad_tdnn_stats/140.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000467347, max-change=0.75, linear-params-rms=0.001627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,5e-05,5e-05,5e-05 5e-05,5e-05,0.005,0.03,0.04 0.04,0.05,0.05,0.06), mean=0.016, stddev=0.0165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.05), mean=0.0257, stddev=0.00384], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,6e-07 8e-05,0.0005,0.007,0.03,0.05 0.06,0.07,0.08,0.10), mean=0.0163, stddev=0.0202], bias-{mean,stddev}=-0.0002074,0.002818, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000467347, max-change=0.75, linear-params-rms=0.0009935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.006,0.007 0.009,0.01,0.02,0.04,0.06 0.07,0.07,0.07,0.08), mean=0.0256, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0112, stddev=0.0112], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.002,0.003,0.008,0.03,0.05 0.07,0.10,0.12,0.17), mean=0.0182, stddev=0.026], bias-{mean,stddev}=-2.973e-06,5.423e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000467347, max-change=0.75, linear-params-rms=0.0006504, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.008 0.01,0.01,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0196, stddev=0.007], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0007,0.001 0.001,0.002,0.004,0.01,0.02 0.02,0.03,0.03,0.03), mean=0.00745, stddev=0.00723], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.003,0.007,0.02,0.03 0.05,0.06,0.07,0.09), mean=0.0136, stddev=0.0158], bias-{mean,stddev}=1.629e-06,0.0001389, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.008,0.01 0.01,0.02,0.02,0.05), mean=0.00408, stddev=0.00695], oderiv-count=2764.8
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000467347, max-change=0.75, linear-params-rms=0.0008824, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0304, stddev=0.00847], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.007,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0126, stddev=0.00621], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.009,0.02,0.04,0.05 0.07,0.08,0.10,0.12), mean=0.0241, stddev=0.0204], bias-{mean,stddev}=7.853e-07,8.007e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.51e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,0.01,0.05,0.09 0.14,0.21,0.61,1.2,1.6 1.9,2.6,3.3,4.7), mean=0.786, stddev=0.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.007,0.07,0.09,0.13 0.17,0.24,0.42,0.58,0.66 0.72,0.78,0.80,0.93), mean=0.416, stddev=0.184], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.005 0.006,0.007,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00897, stddev=0.00292], oderiv-count=34560
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000467347, max-change=0.75, linear-params-rms=0.001118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0008,0.003 0.006,0.01,0.04,0.05,0.06 0.07,0.07,0.07,0.08), mean=0.0345, stddev=0.0202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.004,0.005 0.006,0.009,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0161, stddev=0.00773], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0005,0.001 0.003,0.006,0.02,0.05,0.07 0.09,0.11,0.11,0.12), mean=0.0294, stddev=0.0271], bias-{mean,stddev}=1.728e-05,0.0001011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.52e+03, self-repaired-proportion=-0.0144531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.1,-0.58,-0.32 -0.16,-0.01,0.40,1.4,1.9 2.4,3.2,3.5,6.2), mean=0.686, stddev=0.985], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.50,-0.38,-0.36,-0.16 -0.08,0.10,0.41,0.81,0.97 1.2,1.3,1.4,2.0), mean=0.45, stddev=0.418]
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=4.67347e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.001088, linear-params-row-norms=[ 0.02 0.02 0.0009 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,2e-05,5e-05,8e-05 0.0001,0.0003,0.001,0.002,0.003 0.004,0.004,0.005,0.008), mean=0.00138, stddev=0.00129], linear-params-singular-values=[ 0.03 0.001 2e-07 ], bias-{mean,stddev}=1.242e-09,0.0006027, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3

LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.370083 tdnn2.affine:0.50769 tdnn3.affine:0.33237 tdnn4.affine:0.504332 tdnn5.affine:0.640228 output.affine:0.030161 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:29.9415 tdnn2.affine:46.5719 tdnn3.affine:28.8474 tdnn4.affine:30.787 tdnn5.affine:29.0281 output.affine:2.19763 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0123792 tdnn2.affine:0.0109172 tdnn3.affine:0.0115321 tdnn4.affine:0.0163966 tdnn5.affine:0.0220809 output.affine:0.0137888 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:40:44 EST 2020, elapsed time 0 seconds
