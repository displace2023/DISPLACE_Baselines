# nnet3-info exp/dihard3_sad_tdnn_stats/10.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/9.raw exp/dihard3_sad_tdnn_stats/10.raw 
# Started at Sat Nov 28 18:25:18 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/10.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.0011224, max-change=0.75, linear-params-rms=0.07288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.94,0.97,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.03, stddev=0.0714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.7), mean=1.16, stddev=0.0752], bias-{mean,stddev}=-0.08169,0.941, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.91e+06, self-repaired-proportion=0.930471, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0002,0.70,1.2 1.5,2.1,2.1,2.6), mean=0.337, stddev=0.545], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.009,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.452, stddev=0.488], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.02,0.08,0.10 0.12,0.13,0.14,0.15), mean=0.0433, stddev=0.0372], oderiv-count=1.55565e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0011224, max-change=0.75, linear-params-rms=0.0386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.97 0.98,0.99,1.0,1.3,1.7 1.9,2.2,2.4,3.0), mean=1.19, stddev=0.333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,0.72,0.82 0.89,0.96,1.0,1.2), mean=0.6, stddev=0.143], bias-{mean,stddev}=-0.01734,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.11e+05, self-repaired-proportion=0.207899, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.006,0.01,0.05,0.31,0.95 1.5,2.1,2.6,6.4), mean=0.299, stddev=0.689], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.22,0.62,0.92 0.96,1.0,1.0,1.0), mean=0.342, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.009,0.02,0.03 0.04,0.05,0.06,0.08), mean=0.0145, stddev=0.0125], oderiv-count=519552
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0011224, max-change=0.75, linear-params-rms=0.03229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.2,1.3,1.4), mean=1.03, stddev=0.0632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.53,0.57 0.60,0.67,0.76,0.96), mean=0.513, stddev=0.0533], bias-{mean,stddev}=0.03642,0.9196, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.75e+05, self-repaired-proportion=0.0808516, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.02,0.04,0.21,0.89,1.2 1.6,1.9,2.1,2.5), mean=0.465, stddev=0.538], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.12,0.16,0.39,0.85,0.91 0.93,0.94,0.95,0.98), mean=0.471, stddev=0.3], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00765, stddev=0.0034], oderiv-count=524160
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.0011224, max-change=0.75, linear-params-rms=0.02906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.0752], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.43,0.46,0.49,0.51 0.53,0.56,0.58,0.64), mean=0.463, stddev=0.0361], bias-{mean,stddev}=-0.04719,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.39e+05, self-repaired-proportion=0.0440505, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.007,0.009,0.01 0.02,0.03,0.21,0.75,1.0 1.2,1.6,1.9,2.6), mean=0.397, stddev=0.454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.05,0.06,0.07 0.09,0.12,0.34,0.65,0.79 0.88,0.90,0.93,0.95), mean=0.386, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.008,0.01,0.01 0.02,0.02,0.03,0.06), mean=0.00965, stddev=0.00511], oderiv-count=334400
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.0011224, max-change=0.75, linear-params-rms=0.02825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.96,0.98,0.99,1.0,1.1 1.1,1.2,1.2,1.3), mean=1.01, stddev=0.0553], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.51,0.52,0.76), mean=0.451, stddev=0.027], bias-{mean,stddev}=-0.07538,0.8835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.54e+04, self-repaired-proportion=0.243327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-07,1e-05,0.001 0.01,0.03,0.17,0.87,1.3 1.6,1.9,2.1,2.9), mean=0.443, stddev=0.555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-06,8e-05,0.006 0.04,0.09,0.33,0.79,0.97 1.0,1.0,1.0,1.0), mean=0.426, stddev=0.334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,8e-08,3e-06,0.0001 0.0005,0.001,0.006,0.02,0.02 0.03,0.04,0.04,0.07), mean=0.0094, stddev=0.0106], oderiv-count=103488
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.00011224, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.02826, linear-params-row-norms=[ 0.53 0.49 0.31 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,2e-07,1e-05,0.0002 0.001,0.003,0.02,0.06,0.08 0.10,0.12,0.14,0.20), mean=0.0337, stddev=0.0355], bias-{mean,stddev}=-4.657e-09,0.01627, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=98112
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/9.raw exp/dihard3_sad_tdnn_stats/10.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.471929 tdnn2.affine:1.51079 tdnn3.affine:0.757522 tdnn4.affine:0.71177 tdnn5.affine:0.680376 output.affine:0.0466625 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.3258 tdnn2.affine:25.1755 tdnn3.affine:22.0969 tdnn4.affine:23.8183 tdnn5.affine:21.5178 output.affine:0.783746 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0211569 tdnn2.affine:0.0609237 tdnn3.affine:0.0343841 tdnn4.affine:0.0299565 tdnn5.affine:0.031664 output.affine:0.0617661 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:25:18 EST 2020, elapsed time 0 seconds
