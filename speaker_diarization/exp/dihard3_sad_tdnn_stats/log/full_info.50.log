# nnet3-info --verbose=2 exp/dihard3_sad_tdnn_stats/50.raw 
# Started at Sat Nov 28 18:29:53 EST 2020
#
nnet3-info --verbose=2 exp/dihard3_sad_tdnn_stats/50.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000833905, max-change=0.75, linear-params-rms=0.09451, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.6,1.7 1.8,2.0,3.0,3.9), mean=1.27, stddev=0.401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.3,1.5,1.6,1.7 1.8,1.9,2.0,3.0), mean=1.5, stddev=0.198], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.25 0.34,0.51,1.0,1.7,2.0 3.1,4.0,4.6,5.3), mean=1.22, stddev=0.894], bias-{mean,stddev}=-0.07168,0.7909, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.66e+06, self-repaired-proportion=0.761793, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.52,0.98 1.3,1.8,1.9,2.4), mean=0.262, stddev=0.462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.443, stddev=0.468], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.006,0.006,0.009,0.07,0.08 0.10,0.11,0.12,0.16), mean=0.0361, stddev=0.0354], oderiv-count=1.54867e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000833905, max-change=0.75, linear-params-rms=0.06515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.2,2.4,3.5 4.1,4.6,5.0,7.1), mean=1.77, stddev=1.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.4,1.6 1.8,1.9,2.1,2.4), mean=0.914, stddev=0.497], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.62 0.68,0.77,1.0,1.4,1.8 3.1,6.8,9.2,14), mean=1.4, stddev=1.55], bias-{mean,stddev}=-0.0174,0.9791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.57e+05, self-repaired-proportion=0.0214703, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.005,0.007 0.009,0.02,0.07,0.41,1.2 2.6,3.6,4.3,11), mean=0.479, stddev=1.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.09 0.11,0.13,0.24,0.52,0.75 0.90,0.94,0.94,1.0), mean=0.337, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.006,0.01 0.02,0.02,0.02,0.03), mean=0.00472, stddev=0.00517], oderiv-count=507456
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000833905, max-change=0.75, linear-params-rms=0.03923, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.98,0.99 1.0,1.0,1.2,1.4,1.5 1.7,1.9,1.9,2.3), mean=1.23, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.64,0.86 1.0,1.2,1.4,1.7), mean=0.593, stddev=0.202], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.56,0.58 0.65,0.74,1.0,1.3,1.5 2.3,2.9,3.7,4.3), mean=1.11, stddev=0.578], bias-{mean,stddev}=0.03652,0.9187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.01e+05, self-repaired-proportion=0.00040016, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.04,0.06 0.10,0.17,0.50,1.4,2.1 2.6,2.9,3.0,4.3), mean=0.825, stddev=0.803], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.13,0.17 0.20,0.26,0.41,0.69,0.79 0.85,0.88,0.89,0.94), mean=0.459, stddev=0.214], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.008,0.008,0.02), mean=0.00367, stddev=0.00192], oderiv-count=472896
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000833905, max-change=0.75, linear-params-rms=0.03526, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.2,1.4,1.5 1.8,1.9,2.1,2.2), mean=1.24, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.52,0.64,0.72 0.78,0.84,0.87,1.0), mean=0.551, stddev=0.114], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.62,0.65 0.71,0.79,1.0,1.3,1.7 2.2,2.7,3.0,3.9), mean=1.16, stddev=0.508], bias-{mean,stddev}=-0.04683,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3e+05, self-repaired-proportion=0.000132685, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.06,0.11,0.44,0.95,1.3 1.8,2.2,3.0,3.6), mean=0.62, stddev=0.618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.11 0.13,0.19,0.37,0.54,0.66 0.75,0.78,0.81,0.89), mean=0.385, stddev=0.192], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00573, stddev=0.00262], oderiv-count=355200
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000833905, max-change=0.75, linear-params-rms=0.03354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.97 0.98,0.99,1.1,1.4,1.6 1.7,1.9,1.9,2.0), mean=1.17, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.46,0.51,0.60,0.64 0.69,0.75,0.79,1.2), mean=0.529, stddev=0.0878], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.62,0.64 0.69,0.78,1.0,1.3,1.6 2.0,2.4,2.9,3.6), mean=1.11, stddev=0.451], bias-{mean,stddev}=-0.07534,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7e+04, self-repaired-proportion=0.0841999, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.003,0.01,0.01 0.02,0.04,0.28,1.2,1.7 2.0,2.2,2.5,3.6), mean=0.637, stddev=0.719], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.05,0.06 0.07,0.12,0.36,0.76,0.89 0.94,0.98,0.99,1.0), mean=0.428, stddev=0.305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0002,0.0003 0.0008,0.002,0.006,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.00852, stddev=0.0078], oderiv-count=96768
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.33905e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04445, linear-params-row-norms=[ 0.85 0.79 0.42 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0009,0.002 0.006,0.01,0.05,0.10,0.12 0.15,0.18,0.20,0.30), mean=0.0585, stddev=0.0501], linear-params-singular-values=[ 1.1 0.50 6e-06 ], bias-{mean,stddev}=-1.645e-07,0.02553, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=96768
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:29:53 EST 2020, elapsed time 0 seconds
