# nnet3-info exp/dihard3_sad_tdnn_stats/33.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/32.raw exp/dihard3_sad_tdnn_stats/33.raw 
# Started at Sat Nov 28 18:27:56 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/33.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00094614, max-change=0.75, linear-params-rms=0.08506, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.4,1.5 1.6,1.6,2.2,3.1), mean=1.17, stddev=0.269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.5,1.7,1.8,2.6), mean=1.35, stddev=0.158], bias-{mean,stddev}=-0.07802,0.8539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.87e+06, self-repaired-proportion=0.849298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.60,1.1 1.4,1.9,2.0,2.5), mean=0.291, stddev=0.497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.444, stddev=0.477], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.006,0.007,0.01,0.08,0.09 0.10,0.12,0.13,0.16), mean=0.0383, stddev=0.0369], oderiv-count=1.51205e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00094614, max-change=0.75, linear-params-rms=0.05647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.99,0.99 1.0,1.0,1.1,2.0,2.9 3.4,4.0,4.4,6.2), mean=1.57, stddev=0.897], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.2,1.4 1.5,1.7,1.8,2.1), mean=0.813, stddev=0.39], bias-{mean,stddev}=-0.01733,0.9792, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.27e+05, self-repaired-proportion=0.0461036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.01,0.06,0.45,1.1 2.1,2.8,3.6,11), mean=0.422, stddev=1.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.11,0.13,0.26,0.56,0.86 0.91,0.94,0.96,1.0), mean=0.356, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.008,0.02 0.02,0.02,0.03,0.04), mean=0.00606, stddev=0.00646], oderiv-count=544896
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00094614, max-change=0.75, linear-params-rms=0.0363, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 1.0,1.0,1.1,1.2,1.4 1.4,1.7,1.7,2.0), mean=1.15, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.51,0.58,0.75 0.87,1.1,1.2,1.4), mean=0.561, stddev=0.148], bias-{mean,stddev}=0.03653,0.919, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.66e+05, self-repaired-proportion=0.00166254, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.10,0.37,1.3,1.9 2.2,2.5,2.7,4.0), mean=0.697, stddev=0.745], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.14 0.17,0.22,0.38,0.74,0.83 0.89,0.90,0.92,0.93), mean=0.454, stddev=0.247], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.006,0.007 0.008,0.009,0.01,0.02), mean=0.00427, stddev=0.00223], oderiv-count=550080
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00094614, max-change=0.75, linear-params-rms=0.03259, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,0.99 1.0,1.0,1.1,1.3,1.4 1.5,1.6,1.8,1.9), mean=1.15, stddev=0.18], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.49,0.58,0.63 0.69,0.74,0.77,0.91), mean=0.514, stddev=0.0842], bias-{mean,stddev}=-0.04698,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.21e+05, self-repaired-proportion=0.00059862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.04,0.08,0.37,0.90,1.3 1.8,2.1,2.7,3.1), mean=0.554, stddev=0.586], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.09 0.12,0.19,0.35,0.58,0.71 0.78,0.83,0.86,0.92), mean=0.388, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.008,0.009 0.01,0.02,0.02,0.03), mean=0.00633, stddev=0.00312], oderiv-count=362800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00094614, max-change=0.75, linear-params-rms=0.03092, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.96,0.96 0.97,0.99,1.0,1.2,1.3 1.5,1.6,1.6,1.7), mean=1.09, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.42 0.43,0.44,0.48,0.53,0.57 0.61,0.64,0.67,1.1), mean=0.491, stddev=0.0599], bias-{mean,stddev}=-0.07545,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.98e+04, self-repaired-proportion=0.130343, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,0.0005,0.002,0.01 0.02,0.04,0.24,1.1,1.6 1.9,2.4,2.7,3.7), mean=0.585, stddev=0.693], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.003,0.01,0.05 0.07,0.11,0.35,0.79,0.93 0.99,1.0,1.0,1.0), mean=0.432, stddev=0.322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,6e-05,0.0001,0.0004 0.0006,0.002,0.005,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.00855, stddev=0.00851], oderiv-count=106960
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=9.4614e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.0387, linear-params-row-norms=[ 0.74 0.68 0.38 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0002,0.0004,0.002 0.003,0.009,0.04,0.09,0.11 0.13,0.16,0.17,0.27), mean=0.0492, stddev=0.0456], bias-{mean,stddev}=7.699e-08,0.02184, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=103376
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/32.raw exp/dihard3_sad_tdnn_stats/33.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.571795 tdnn2.affine:1.14717 tdnn3.affine:0.605578 tdnn4.affine:0.703911 tdnn5.affine:0.891943 output.affine:0.0504519 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.5889 tdnn2.affine:32.8216 tdnn3.affine:23.6586 tdnn4.affine:25.2623 tdnn5.affine:22.6867 output.affine:1.07321 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0243222 tdnn2.affine:0.0352847 tdnn3.affine:0.0256769 tdnn4.affine:0.0279426 tdnn5.affine:0.0394321 output.affine:0.047725 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:27:56 EST 2020, elapsed time 0 seconds
