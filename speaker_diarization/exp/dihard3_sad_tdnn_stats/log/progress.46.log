# nnet3-info exp/dihard3_sad_tdnn_stats/46.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/45.raw exp/dihard3_sad_tdnn_stats/46.raw 
# Started at Sat Nov 28 18:29:26 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/46.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.09246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.5,1.6 1.7,1.9,2.9,3.8), mean=1.25, stddev=0.376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.6,1.7 1.7,1.8,1.9,2.9), mean=1.46, stddev=0.19], bias-{mean,stddev}=-0.07317,0.8049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.47e+06, self-repaired-proportion=0.788949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.53,1.0 1.3,1.8,1.9,2.4), mean=0.269, stddev=0.47], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.443, stddev=0.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.006,0.006,0.009,0.07,0.09 0.10,0.12,0.12,0.17), mean=0.0371, stddev=0.0364], oderiv-count=1.60274e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.06336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.99,1.0 1.0,1.0,1.2,2.3,3.4 4.0,4.5,4.9,6.9), mean=1.72, stddev=1.07], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.4,1.6 1.7,1.9,2.0,2.3), mean=0.893, stddev=0.475], bias-{mean,stddev}=-0.01741,0.9791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.43e+05, self-repaired-proportion=0.025937, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.005,0.006 0.009,0.02,0.07,0.45,1.4 2.5,3.2,4.2,11), mean=0.467, stddev=1.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.11,0.14,0.24,0.57,0.75 0.90,0.93,0.94,1.0), mean=0.342, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.007,0.01 0.02,0.02,0.02,0.04), mean=0.005, stddev=0.00546], oderiv-count=484992
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.03857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,0.98,0.99 1.0,1.0,1.2,1.3,1.5 1.7,1.8,1.9,2.3), mean=1.22, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.47,0.48,0.51,0.63,0.84 1.0,1.2,1.4,1.7), mean=0.586, stddev=0.191], bias-{mean,stddev}=0.0365,0.9187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.09e+05, self-repaired-proportion=0.000397121, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.04,0.06 0.09,0.15,0.48,1.3,2.0 2.3,2.7,3.0,4.4), mean=0.8, stddev=0.788], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.13,0.15 0.20,0.27,0.40,0.68,0.80 0.86,0.88,0.89,0.92), mean=0.459, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.008,0.008,0.02), mean=0.00373, stddev=0.00197], oderiv-count=513792
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.03464, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.98,0.99 1.0,1.0,1.1,1.4,1.5 1.7,1.8,2.0,2.2), mean=1.22, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.51,0.63,0.70 0.75,0.82,0.85,0.99), mean=0.543, stddev=0.108], bias-{mean,stddev}=-0.04687,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.37e+05, self-repaired-proportion=0.000441867, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.05,0.11,0.44,0.93,1.4 1.8,2.2,3.0,3.6), mean=0.615, stddev=0.622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.11 0.13,0.18,0.37,0.55,0.67 0.74,0.77,0.80,0.91), mean=0.387, stddev=0.196], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00583, stddev=0.0027], oderiv-count=344800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.03291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.98,0.99,1.0,1.3,1.5 1.7,1.8,1.8,1.9), mean=1.16, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.50,0.58,0.63 0.67,0.72,0.77,1.2), mean=0.52, stddev=0.0815], bias-{mean,stddev}=-0.07534,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.11e+04, self-repaired-proportion=0.089129, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.009,0.02 0.02,0.04,0.27,1.2,1.7 2.0,2.2,2.5,3.6), mean=0.617, stddev=0.704], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.008,0.04,0.06 0.07,0.11,0.35,0.77,0.90 0.95,0.99,1.0,1.0), mean=0.427, stddev=0.308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0001,0.0001,0.0003 0.0008,0.002,0.006,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.00855, stddev=0.00797], oderiv-count=106400
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.59053e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04296, linear-params-row-norms=[ 0.82 0.76 0.41 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0005,0.0009,0.002 0.005,0.01,0.04,0.10,0.12 0.14,0.18,0.19,0.30), mean=0.056, stddev=0.049], bias-{mean,stddev}=-8.009e-08,0.02459, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.90 0 ], oderiv-count=101696
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/45.raw exp/dihard3_sad_tdnn_stats/46.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.580061 tdnn2.affine:1.07445 tdnn3.affine:0.566119 tdnn4.affine:0.702224 tdnn5.affine:0.912789 output.affine:0.050942 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.5468 tdnn2.affine:35.9545 tdnn3.affine:24.5781 tdnn4.affine:26.1376 tdnn5.affine:23.5901 output.affine:1.19133 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.023691 tdnn2.affine:0.0300453 tdnn3.affine:0.0230944 tdnn4.affine:0.0269324 tdnn5.affine:0.0388012 output.affine:0.0430787 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:29:26 EST 2020, elapsed time 0 seconds
