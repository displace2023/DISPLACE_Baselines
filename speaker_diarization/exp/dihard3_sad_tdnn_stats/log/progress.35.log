# nnet3-info exp/dihard3_sad_tdnn_stats/35.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/34.raw exp/dihard3_sad_tdnn_stats/35.raw 
# Started at Sat Nov 28 18:28:10 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/35.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000932189, max-change=0.75, linear-params-rms=0.08625, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.4,1.5 1.6,1.7,2.3,3.2), mean=1.19, stddev=0.287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.5,1.5 1.6,1.7,1.8,2.7), mean=1.37, stddev=0.163], bias-{mean,stddev}=-0.07743,0.8462, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.93e+06, self-repaired-proportion=0.833705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.59,1.1 1.4,1.9,2.0,2.5), mean=0.288, stddev=0.493], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.444, stddev=0.476], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.006,0.007,0.01,0.07,0.09 0.10,0.12,0.13,0.16), mean=0.0388, stddev=0.0375], oderiv-count=1.52949e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000932189, max-change=0.75, linear-params-rms=0.05764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.99,0.99 1.0,1.0,1.1,2.0,2.9 3.5,4.1,4.5,6.4), mean=1.59, stddev=0.926], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.2,1.4 1.6,1.7,1.8,2.2), mean=0.827, stddev=0.405], bias-{mean,stddev}=-0.01735,0.9792, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.66e+05, self-repaired-proportion=0.0440779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.005 0.006,0.01,0.06,0.43,1.2 2.1,3.0,3.7,11), mean=0.434, stddev=1.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.10,0.12,0.24,0.59,0.84 0.92,0.95,0.97,1.0), mean=0.345, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.008,0.01 0.02,0.02,0.03,0.04), mean=0.00574, stddev=0.00615], oderiv-count=454464
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000932189, max-change=0.75, linear-params-rms=0.03667, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 1.0,1.0,1.1,1.3,1.4 1.5,1.7,1.7,2.1), mean=1.16, stddev=0.178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.51,0.59,0.77 0.89,1.1,1.3,1.5), mean=0.565, stddev=0.155], bias-{mean,stddev}=0.03651,0.9189, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.75e+05, self-repaired-proportion=0.000540019, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.06,0.09,0.39,1.4,1.9 2.3,2.5,2.7,4.2), mean=0.713, stddev=0.754], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.11,0.15 0.18,0.22,0.38,0.74,0.82 0.88,0.91,0.92,0.93), mean=0.456, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.006,0.007 0.008,0.009,0.01,0.02), mean=0.00425, stddev=0.00222], oderiv-count=520128
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000932189, max-change=0.75, linear-params-rms=0.03294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,0.99 1.0,1.0,1.1,1.3,1.4 1.5,1.7,1.9,2.0), mean=1.16, stddev=0.189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.49,0.59,0.65 0.70,0.75,0.78,0.93), mean=0.518, stddev=0.0884], bias-{mean,stddev}=-0.04695,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.53e+05, self-repaired-proportion=0.000288958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.05,0.08,0.39,0.86,1.3 1.8,2.2,2.8,3.2), mean=0.563, stddev=0.596], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.12,0.18,0.36,0.57,0.72 0.76,0.82,0.85,0.93), mean=0.386, stddev=0.209], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.008,0.01 0.01,0.02,0.02,0.03), mean=0.0063, stddev=0.00309], oderiv-count=367600
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000932189, max-change=0.75, linear-params-rms=0.03123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.96 0.97,0.99,1.0,1.2,1.4 1.5,1.6,1.6,1.8), mean=1.1, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.43,0.44,0.48,0.54,0.58 0.62,0.66,0.69,1.1), mean=0.496, stddev=0.0636], bias-{mean,stddev}=-0.07542,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.7e+04, self-repaired-proportion=0.123132, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0005,0.003,0.01 0.02,0.04,0.25,1.1,1.6 1.9,2.3,2.7,3.7), mean=0.594, stddev=0.701], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.003,0.01,0.05 0.07,0.11,0.35,0.79,0.94 0.98,1.0,1.0,1.0), mean=0.432, stddev=0.319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,7e-05,0.0002,0.0003 0.0006,0.002,0.006,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.00871, stddev=0.00853], oderiv-count=102144
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=9.32189e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03956, linear-params-row-norms=[ 0.76 0.69 0.39 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0001,0.0003,0.002 0.003,0.009,0.04,0.09,0.12 0.13,0.17,0.18,0.27), mean=0.0505, stddev=0.0463], bias-{mean,stddev}=6.24e-08,0.02224, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=98000
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/34.raw exp/dihard3_sad_tdnn_stats/35.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.584399 tdnn2.affine:1.15599 tdnn3.affine:0.600736 tdnn4.affine:0.710641 tdnn5.affine:0.898468 output.affine:0.0513977 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.7394 tdnn2.affine:33.3461 tdnn3.affine:23.8085 tdnn4.affine:25.4088 tdnn5.affine:22.826 output.affine:1.09696 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0246954 tdnn2.affine:0.0349327 tdnn3.affine:0.0253083 tdnn4.affine:0.0280515 tdnn5.affine:0.0394849 output.affine:0.0472845 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:28:10 EST 2020, elapsed time 0 seconds
