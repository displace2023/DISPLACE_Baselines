# nnet3-info exp/dihard3_sad_tdnn_stats/14.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/13.raw exp/dihard3_sad_tdnn_stats/14.raw 
# Started at Sat Nov 28 18:25:46 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/14.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.07454, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.94,0.98,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.05, stddev=0.0942], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2,1.3 1.3,1.3,1.4,1.9), mean=1.19, stddev=0.0919], bias-{mean,stddev}=-0.08168,0.926, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.6e+06, self-repaired-proportion=0.913253, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0004,0.69,1.2 1.5,2.1,2.1,2.6), mean=0.329, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.451, stddev=0.486], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.009 0.01,0.01,0.02,0.08,0.10 0.11,0.12,0.13,0.15), mean=0.0429, stddev=0.0381], oderiv-count=1.51379e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.04248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.97,0.97 0.98,1.0,1.0,1.5,1.9 2.3,2.7,3.0,3.7), mean=1.27, stddev=0.476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,0.83,0.96 1.1,1.1,1.2,1.5), mean=0.648, stddev=0.201], bias-{mean,stddev}=-0.01734,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.09e+05, self-repaired-proportion=0.133269, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.005 0.006,0.01,0.06,0.33,1.0 1.4,2.1,3.0,8.0), mean=0.329, stddev=0.81], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.22,0.61,0.89 0.94,0.97,0.99,1.0), mean=0.348, stddev=0.291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.007,0.02,0.03 0.03,0.04,0.05,0.07), mean=0.0113, stddev=0.0104], oderiv-count=546048
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.03297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.3,1.4,1.5), mean=1.05, stddev=0.0839], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.54,0.60 0.65,0.77,0.86,1.1), mean=0.522, stddev=0.0716], bias-{mean,stddev}=0.03642,0.9195, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.55e+05, self-repaired-proportion=0.0429057, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.04,0.23,1.0,1.3 1.8,1.9,2.4,3.0), mean=0.514, stddev=0.588], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.13,0.18,0.39,0.83,0.89 0.91,0.93,0.94,0.95), mean=0.469, stddev=0.286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.009,0.01 0.01,0.01,0.02,0.02), mean=0.00663, stddev=0.00311], oderiv-count=523008
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.02966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.97,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.4,1.4,1.5), mean=1.06, stddev=0.0956], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.46,0.51,0.53 0.56,0.59,0.61,0.70), mean=0.471, stddev=0.0448], bias-{mean,stddev}=-0.04715,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.36e+05, self-repaired-proportion=0.0211891, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.02,0.04,0.24,0.78,1.1 1.5,1.9,2.0,2.7), mean=0.438, stddev=0.501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.10,0.13,0.35,0.61,0.78 0.85,0.88,0.89,0.94), mean=0.385, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.02,0.02,0.03,0.05), mean=0.00886, stddev=0.00451], oderiv-count=328000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.02859, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.2,1.3,1.3,1.4), mean=1.02, stddev=0.073], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.42,0.43,0.45,0.48,0.49 0.51,0.53,0.55,0.84), mean=0.456, stddev=0.0318], bias-{mean,stddev}=-0.07544,0.8835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.3e+04, self-repaired-proportion=0.23447, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-07,2e-05,0.005 0.01,0.03,0.18,0.92,1.3 1.8,2.1,2.3,3.1), mean=0.472, stddev=0.588], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,0.0002,0.02 0.05,0.11,0.33,0.80,0.96 1.0,1.0,1.0,1.0), mean=0.43, stddev=0.333], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,1e-06,3e-06,0.0002 0.0005,0.001,0.005,0.02,0.02 0.03,0.04,0.04,0.06), mean=0.00934, stddev=0.0104], oderiv-count=106176
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000108955, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03069, linear-params-row-norms=[ 0.58 0.53 0.33 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,2e-06,8e-06,0.0006 0.002,0.003,0.02,0.07,0.09 0.11,0.13,0.14,0.22), mean=0.0369, stddev=0.0382], bias-{mean,stddev}=2.794e-09,0.01735, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=93408
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/13.raw exp/dihard3_sad_tdnn_stats/14.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.51812 tdnn2.affine:1.4429 tdnn3.affine:0.701407 tdnn4.affine:0.726228 tdnn5.affine:0.749069 output.affine:0.0399661 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.4438 tdnn2.affine:26.7549 tdnn3.affine:22.3546 tdnn4.affine:24.0562 tdnn5.affine:21.6635 output.affine:0.85109 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0231224 tdnn2.affine:0.0547884 tdnn3.affine:0.0314712 tdnn4.affine:0.0302657 tdnn5.affine:0.034641 output.affine:0.0479538 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:25:46 EST 2020, elapsed time 0 seconds
