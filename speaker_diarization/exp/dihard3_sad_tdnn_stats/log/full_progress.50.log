# nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/49.raw exp/dihard3_sad_tdnn_stats/50.raw 
# Started at Sat Nov 28 18:29:53 EST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/49.raw exp/dihard3_sad_tdnn_stats/50.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000840122, max-change=0.75, linear-params-rms=0.002544, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0001 0.0001,0.0001,0.005,0.05,0.06 0.06,0.07,0.09,0.13), mean=0.024, stddev=0.0268], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0399, stddev=0.00772], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 1e-07,1e-05,0.005,0.03,0.07 0.09,0.13,0.16,0.19), mean=0.0212, stddev=0.0347], bias-{mean,stddev}=-0.0003129,0.004677, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=7.95e+04, self-repaired-proportion=0.906443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,-0.03,-0.01,-0.001 -1e-06,0,0.0008,0.59,1.1 1.4,2.0,2.0,2.5), mean=0.298, stddev=0.507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.10,-0.04,-0.002 0,0,0.06,1.0,1.0 1.0,1.1,1.2,1.4), mean=0.444, stddev=0.493], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.008,0.01,0.10,0.11 0.13,0.16,0.18,0.19), mean=0.0474, stddev=0.0479], oderiv-count=130800
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000840122, max-change=0.75, linear-params-rms=0.002075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.01 0.01,0.02,0.03,0.08,0.13 0.14,0.16,0.17,0.19), mean=0.0501, stddev=0.0436], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.006,0.05,0.05 0.06,0.07,0.07,0.09), mean=0.0227, stddev=0.0241], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.004,0.01,0.04,0.09 0.14,0.22,0.28,0.46), mean=0.033, stddev=0.0576], bias-{mean,stddev}=8.32e-06,0.0001632, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=7.52e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-0.62,-0.46,-0.23 -0.13,-0.04,0.06,0.48,1.5 2.9,3.7,4.0,11), mean=0.449, stddev=1.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-1.0,-0.97,-0.68 -0.30,-0.07,0.29,0.81,1.0 1.2,1.5,1.7,2.4), mean=0.331, stddev=0.561], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.002,0.002 0.002,0.002,0.003,0.009,0.02 0.02,0.03,0.03,0.05), mean=0.00614, stddev=0.00687], oderiv-count=29376
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000840122, max-change=0.75, linear-params-rms=0.001116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.01 0.01,0.02,0.03,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0327, stddev=0.0142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0007,0.0009 0.001,0.002,0.005,0.02,0.04 0.04,0.05,0.05,0.06), mean=0.0116, stddev=0.0135], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.003,0.008,0.03,0.05 0.08,0.11,0.14,0.18), mean=0.0202, stddev=0.0294], bias-{mean,stddev}=1.729e-06,0.0002722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.009,0.009,0.02), mean=0.00379, stddev=0.00214], oderiv-count=52416
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000840122, max-change=0.75, linear-params-rms=0.001256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.04,0.06,0.06 0.07,0.07,0.08,0.08), mean=0.0416, stddev=0.0171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.007,0.02,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0173, stddev=0.0101], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.006,0.008,0.02,0.05,0.07 0.10,0.13,0.15,0.18), mean=0.0309, stddev=0.0326], bias-{mean,stddev}=-1.07e-05,0.0001891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.96e+04, self-repaired-proportion=-0.000630252, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.66,-0.48,-0.25,-0.17 -0.03,0.04,0.46,1.2,1.8 2.4,3.5,4.1,5.7), mean=0.732, stddev=0.913], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.45,-0.25,-0.12,-0.02 0.04,0.15,0.45,0.75,0.85 0.98,1.0,1.1,1.4), mean=0.458, stddev=0.318]
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000840122, max-change=0.75, linear-params-rms=0.001604, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.004,0.01,0.03,0.08,0.10 0.11,0.12,0.12,0.14), mean=0.0448, stddev=0.0359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.004 0.005,0.009,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.022, stddev=0.0132], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0005,0.001 0.002,0.004,0.02,0.06,0.10 0.14,0.16,0.18,0.22), mean=0.0365, stddev=0.0443], bias-{mean,stddev}=9.864e-06,0.0001519, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.94e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.14,-0.05,-0.02 -0.004,0.02,0.21,1.2,1.7 2.3,2.7,3.1,4.2), mean=0.613, stddev=0.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.10,-0.06,-0.03 0.01,0.09,0.35,0.81,0.96 1.0,1.1,1.1,1.3), mean=0.426, stddev=0.351], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.02,0.02 0.03,0.04,0.04,0.06), mean=0.0088, stddev=0.0106], oderiv-count=5712
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.40122e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.001714, linear-params-row-norms=[ 0.03 0.03 0.003 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,4e-05,7e-05,0.0001 0.0003,0.0006,0.002,0.004,0.005 0.006,0.008,0.008,0.01), mean=0.00224, stddev=0.00195], linear-params-singular-values=[ 0.05 0.003 2e-07 ], bias-{mean,stddev}=1.211e-08,0.0004493, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.39 0.92 0 ], oderiv-count=9296

LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.579304 tdnn2.affine:1.06028 tdnn3.affine:0.570084 tdnn4.affine:0.717712 tdnn5.affine:0.91859 output.affine:0.047512 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.8255 tdnn2.affine:36.7833 tdnn3.affine:24.846 tdnn4.affine:26.4065 tdnn5.affine:23.8793 output.affine:1.23253 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.023394 tdnn2.affine:0.028977 tdnn3.affine:0.0230052 tdnn4.affine:0.0272509 tdnn5.affine:0.0385785 output.affine:0.038937 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:29:53 EST 2020, elapsed time 0 seconds
