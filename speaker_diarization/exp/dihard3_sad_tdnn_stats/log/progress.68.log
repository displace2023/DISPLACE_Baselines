# nnet3-info exp/dihard3_sad_tdnn_stats/68.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/67.raw exp/dihard3_sad_tdnn_stats/68.raw 
# Started at Sat Nov 28 18:31:59 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/68.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000903504, max-change=0.75, linear-params-rms=0.1031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.7,1.9 2.0,2.4,3.4,4.4), mean=1.37, stddev=0.505], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.2,3.3), mean=1.63, stddev=0.226], bias-{mean,stddev}=-0.06488,0.7344, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.63e+06, self-repaired-proportion=0.702573, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.46,0.88 1.2,1.7,1.8,2.2), mean=0.237, stddev=0.431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.438, stddev=0.459], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.009,0.07,0.09 0.10,0.12,0.13,0.17), mean=0.037, stddev=0.0366], oderiv-count=1.62262e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000903504, max-change=0.75, linear-params-rms=0.07192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.1,1.3,2.7,4.1 4.6,5.0,5.7,7.5), mean=1.92, stddev=1.26], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.53,1.6,1.8 2.0,2.2,2.3,2.6), mean=0.993, stddev=0.577], bias-{mean,stddev}=-0.01745,0.979, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.26e+05, self-repaired-proportion=0.0167229, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.01 0.01,0.02,0.09,0.57,1.4 3.0,4.7,5.1,10), mean=0.54, stddev=1.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.09 0.11,0.14,0.27,0.57,0.82 0.89,0.93,0.94,1.0), mean=0.352, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.006,0.01 0.01,0.02,0.02,0.03), mean=0.0043, stddev=0.00465], oderiv-count=532685
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000903504, max-change=0.75, linear-params-rms=0.04188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,0.99,1.0 1.0,1.1,1.3,1.5,1.7 1.9,2.0,2.1,2.4), mean=1.31, stddev=0.273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.70,0.95 1.2,1.4,1.6,1.9), mean=0.622, stddev=0.245], bias-{mean,stddev}=0.03655,0.9185, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.21e+05, self-repaired-proportion=0.000248201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.09 0.13,0.22,0.62,1.4,2.3 2.7,3.1,3.4,4.1), mean=0.923, stddev=0.828], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.14,0.18 0.24,0.28,0.43,0.63,0.74 0.80,0.85,0.86,0.93), mean=0.455, stddev=0.189], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.004,0.006 0.006,0.007,0.008,0.01), mean=0.0034, stddev=0.00174], oderiv-count=505037
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000903504, max-change=0.75, linear-params-rms=0.03786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.0,1.1,1.3,1.5,1.7 1.9,2.1,2.3,2.5), mean=1.32, stddev=0.288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.43 0.45,0.46,0.55,0.70,0.80 0.85,0.95,0.98,1.2), mean=0.588, stddev=0.14], bias-{mean,stddev}=-0.0468,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.08,0.15,0.51,1.0,1.4 1.9,2.1,3.2,3.9), mean=0.672, stddev=0.637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.15,0.20,0.37,0.55,0.66 0.69,0.75,0.79,0.85), mean=0.386, stddev=0.181], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.008 0.01,0.01,0.01,0.02), mean=0.0057, stddev=0.00241], oderiv-count=331840
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000903504, max-change=0.75, linear-params-rms=0.03628, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.96,0.98 0.98,1.0,1.1,1.6,1.8 1.9,2.1,2.2,2.3), mean=1.26, stddev=0.328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.47,0.55,0.67,0.72 0.78,0.83,0.89,1.3), mean=0.57, stddev=0.113], bias-{mean,stddev}=-0.0753,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.76e+04, self-repaired-proportion=0.0315907, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.01,0.02 0.02,0.05,0.32,1.2,1.7 2.0,2.3,2.5,3.9), mean=0.65, stddev=0.711], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.06,0.06 0.07,0.12,0.36,0.73,0.84 0.91,0.93,0.95,0.97), mean=0.418, stddev=0.287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.0002,0.0005 0.001,0.002,0.007,0.01,0.02 0.02,0.02,0.03,0.04), mean=0.00896, stddev=0.00753], oderiv-count=103578
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=9.03504e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04987, linear-params-row-norms=[ 0.96 0.89 0.44 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.002,0.004 0.008,0.02,0.06,0.11,0.14 0.17,0.19,0.22,0.32), mean=0.0681, stddev=0.0531], bias-{mean,stddev}=-4.334e-07,0.03096, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=103309
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/67.raw exp/dihard3_sad_tdnn_stats/68.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.539556 tdnn2.affine:0.879138 tdnn3.affine:0.495225 tdnn4.affine:0.643995 tdnn5.affine:0.864409 output.affine:0.0423701 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.0968 tdnn2.affine:39.9409 tdnn3.affine:25.9511 tdnn4.affine:27.5572 tdnn5.affine:25.1586 output.affine:1.38306 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0207336 tdnn2.affine:0.0220972 tdnn3.affine:0.0191302 tdnn4.affine:0.0234247 tdnn5.affine:0.0344531 output.affine:0.0307703 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:31:59 EST 2020, elapsed time 0 seconds
