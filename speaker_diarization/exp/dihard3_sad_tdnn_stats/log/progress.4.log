# nnet3-info exp/dihard3_sad_tdnn_stats/4.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/3.raw exp/dihard3_sad_tdnn_stats/4.raw 
# Started at Sat Nov 28 18:24:37 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/4.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00117356, max-change=0.75, linear-params-rms=0.07096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.91 0.93,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=1, stddev=0.0523], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.13, stddev=0.0511], bias-{mean,stddev}=-0.0819,0.9606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.66e+06, self-repaired-proportion=0.955026, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,4e-05,0.73,1.3 1.5,2.1,2.2,2.7), mean=0.347, stddev=0.556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.451, stddev=0.489], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.01,0.01,0.02,0.05,0.07 0.08,0.10,0.10,0.14), mean=0.031, stddev=0.0253], oderiv-count=1.51379e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00117356, max-change=0.75, linear-params-rms=0.03353, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.96 0.97,0.98,1.0,1.1,1.2 1.3,1.5,1.5,1.9), mean=1.06, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.47,0.49,0.51,0.57,0.62 0.65,0.70,0.73,0.86), mean=0.532, stddev=0.0625], bias-{mean,stddev}=-0.0172,0.9795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.95e+05, self-repaired-proportion=0.346006, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.008,0.03,0.54,1.2 1.7,2.1,2.9,4.8), mean=0.337, stddev=0.656], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.17,0.83,0.99 1.0,1.0,1.0,1.0), mean=0.356, stddev=0.347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.009,0.01,0.02,0.03 0.04,0.05,0.05,0.08), mean=0.0154, stddev=0.011], oderiv-count=478656
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00117356, max-change=0.75, linear-params-rms=0.03142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.96 0.97,0.98,1.0,1.0,1.0 1.1,1.1,1.1,1.3), mean=1, stddev=0.0366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.47,0.48,0.50,0.52,0.53 0.55,0.58,0.59,0.77), mean=0.501, stddev=0.0313], bias-{mean,stddev}=0.03643,0.9201, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.8e+05, self-repaired-proportion=0.264558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.0007,0.005 0.01,0.02,0.13,0.83,1.2 1.5,1.8,2.0,2.5), mean=0.428, stddev=0.525], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.04 0.07,0.11,0.35,0.89,0.95 0.98,0.99,0.99,1.0), mean=0.462, stddev=0.343], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00887, stddev=0.00346], oderiv-count=487296
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00117356, max-change=0.75, linear-params-rms=0.02825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.96,0.97 0.97,0.98,1.0,1.0,1.0 1.1,1.2,1.2,1.3), mean=1.01, stddev=0.0436], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.51,0.52,0.56), mean=0.45, stddev=0.0247], bias-{mean,stddev}=-0.04721,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.47e+05, self-repaired-proportion=0.204057, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,6e-06,7e-05,0.0007 0.008,0.02,0.17,0.72,1.1 1.3,1.5,2.1,2.3), mean=0.374, stddev=0.464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,7e-05,0.0007,0.006 0.05,0.09,0.34,0.74,0.89 0.94,0.98,0.99,1.0), mean=0.389, stddev=0.309], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.03,0.07), mean=0.0109, stddev=0.00597], oderiv-count=350000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00117356, max-change=0.75, linear-params-rms=0.02787, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.96,0.97,0.99,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.997, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.43,0.45,0.46,0.47 0.48,0.49,0.50,0.62), mean=0.445, stddev=0.0217], bias-{mean,stddev}=-0.07524,0.8837, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.31e+04, self-repaired-proportion=0.311289, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,2e-07,5e-05 0.004,0.01,0.15,0.73,1.2 1.4,1.7,1.8,2.6), mean=0.383, stddev=0.489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-06,0.0005 0.02,0.07,0.33,0.84,0.97 1.0,1.0,1.0,1.0), mean=0.413, stddev=0.347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-10,4e-10,2e-07,3e-05 0.0003,0.0008,0.005,0.02,0.03 0.03,0.04,0.04,0.07), mean=0.00989, stddev=0.0118], oderiv-count=104944
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000117356, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.02363, linear-params-row-norms=[ 0.43 0.41 0.27 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,1e-09,3e-07,1e-05 0.0004,0.002,0.02,0.05,0.07 0.08,0.10,0.11,0.17), mean=0.0275, stddev=0.0303], bias-{mean,stddev}=1.738e-08,0.01422, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=96208
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/3.raw exp/dihard3_sad_tdnn_stats/4.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.457717 tdnn2.affine:1.613 tdnn3.affine:0.988921 tdnn4.affine:0.959846 tdnn5.affine:0.808268 output.affine:0.0605733 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.222 tdnn2.affine:23.2023 tdnn3.affine:21.7738 tdnn4.affine:23.4976 tdnn5.affine:21.358 output.affine:0.655415 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0206034 tdnn2.affine:0.070246 tdnn3.affine:0.0455137 tdnn4.affine:0.0409478 tdnn5.affine:0.0378792 output.affine:0.0979199 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:24:37 EST 2020, elapsed time 0 seconds
