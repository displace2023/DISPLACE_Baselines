# nnet3-info exp/dihard3_sad_tdnn_stats/8.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/7.raw exp/dihard3_sad_tdnn_stats/8.raw 
# Started at Sat Nov 28 18:25:04 EST 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/8.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.0011392, max-change=0.75, linear-params-rms=0.07219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.92 0.94,0.97,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.02, stddev=0.063], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.2,1.2 1.3,1.3,1.3,1.6), mean=1.15, stddev=0.0667], bias-{mean,stddev}=-0.08176,0.9483, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.58e+06, self-repaired-proportion=0.939894, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0001,0.71,1.2 1.5,2.1,2.2,2.6), mean=0.34, stddev=0.549], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.006,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.452, stddev=0.488], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.08,0.10 0.11,0.14,0.14,0.16), mean=0.0427, stddev=0.0362], oderiv-count=1.5975e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0011392, max-change=0.75, linear-params-rms=0.03671, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.97 0.98,0.99,1.0,1.3,1.5 1.7,2.0,2.1,2.5), mean=1.15, stddev=0.259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,0.67,0.74 0.81,0.87,0.91,1.1), mean=0.575, stddev=0.113], bias-{mean,stddev}=-0.01732,0.9794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.97e+05, self-repaired-proportion=0.266766, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.005 0.007,0.01,0.05,0.28,0.95 1.4,2.1,2.9,5.7), mean=0.292, stddev=0.646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.09,0.11,0.21,0.54,0.94 0.98,1.0,1.0,1.0), mean=0.334, stddev=0.3], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.008,0.01,0.02,0.03 0.04,0.05,0.07,0.09), mean=0.0162, stddev=0.0133], oderiv-count=513792
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0011392, max-change=0.75, linear-params-rms=0.03197, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.97,0.99,1.0,1.0,1.1 1.1,1.2,1.2,1.4), mean=1.02, stddev=0.0533], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.47,0.48,0.50,0.53,0.55 0.58,0.64,0.70,0.90), mean=0.509, stddev=0.0446], bias-{mean,stddev}=0.03641,0.9198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.61e+05, self-repaired-proportion=0.135112, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.005,0.009 0.01,0.03,0.18,0.84,1.2 1.5,1.7,2.1,2.5), mean=0.446, stddev=0.529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.10,0.15,0.36,0.87,0.91 0.94,0.96,0.97,0.99), mean=0.464, stddev=0.316], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.007,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00813, stddev=0.00354], oderiv-count=536832
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.0011392, max-change=0.75, linear-params-rms=0.02879, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,0.99,1.0,1.1,1.1 1.1,1.3,1.3,1.4), mean=1.03, stddev=0.0657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.43,0.45,0.48,0.50 0.52,0.54,0.56,0.61), mean=0.459, stddev=0.0322], bias-{mean,stddev}=-0.04721,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.56e+05, self-repaired-proportion=0.0726103, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.006,0.009,0.01 0.02,0.03,0.22,0.78,0.95 1.2,1.5,2.0,2.7), mean=0.384, stddev=0.448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.05,0.06 0.07,0.12,0.32,0.66,0.82 0.91,0.93,0.93,0.95), mean=0.386, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.009,0.01,0.01 0.02,0.02,0.03,0.06), mean=0.0102, stddev=0.00543], oderiv-count=360000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.0011392, max-change=0.75, linear-params-rms=0.02811, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.96,0.97,0.99,1.0,1.1 1.1,1.1,1.2,1.2), mean=1, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.72), mean=0.449, stddev=0.025], bias-{mean,stddev}=-0.07534,0.8836, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.57e+04, self-repaired-proportion=0.249152, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-07,3e-06,0.001 0.01,0.03,0.17,0.85,1.2 1.6,1.9,2.0,2.8), mean=0.425, stddev=0.534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-06,3e-05,0.005 0.04,0.09,0.34,0.78,0.97 1.0,1.0,1.0,1.0), mean=0.422, stddev=0.335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-10,4e-08,1e-06,8e-05 0.0005,0.0009,0.005,0.02,0.02 0.03,0.04,0.04,0.07), mean=0.00939, stddev=0.0108], oderiv-count=104384
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.00011392, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.02683, linear-params-row-norms=[ 0.50 0.46 0.30 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,2e-08,2e-06,6e-05 0.0008,0.002,0.02,0.06,0.08 0.09,0.11,0.12,0.19), mean=0.0317, stddev=0.034], bias-{mean,stddev}=1.18e-08,0.0157, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=100800
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/7.raw exp/dihard3_sad_tdnn_stats/8.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.482658 tdnn2.affine:1.54277 tdnn3.affine:0.763667 tdnn4.affine:0.707082 tdnn5.affine:0.652216 output.affine:0.0366338 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.289 tdnn2.affine:24.423 tdnn3.affine:21.9749 tdnn4.affine:23.7096 tdnn5.affine:21.4577 output.affine:0.743979 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0216764 tdnn2.affine:0.0640494 tdnn3.affine:0.0348313 tdnn4.affine:0.0298867 tdnn5.affine:0.0304305 output.affine:0.0503846 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Sat Nov 28 18:25:05 EST 2020, elapsed time 1 seconds
