# nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/39.raw exp/dihard3_sad_tdnn_stats/40.raw 
# Started at Sat Nov 28 18:28:44 EST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/39.raw exp/dihard3_sad_tdnn_stats/40.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.0009049, max-change=0.75, linear-params-rms=0.002561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0001 0.0001,0.0001,0.005,0.05,0.05 0.06,0.07,0.09,0.17), mean=0.0237, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0401, stddev=0.00812], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,7e-08 1e-07,4e-06,0.005,0.03,0.06 0.10,0.13,0.16,0.22), mean=0.0202, stddev=0.0356], bias-{mean,stddev}=-0.0002804,0.004938, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=9.13e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,-0.01,-0.002,-0.0002 0,0,0.0007,0.65,1.1 1.4,2.0,2.1,2.5), mean=0.309, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.05,-0.03,-0.0002 0,0,0.06,1.0,1.0 1.0,1.1,1.1,1.6), mean=0.446, stddev=0.493]
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0009049, max-change=0.75, linear-params-rms=0.002157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.01,0.02,0.03,0.09,0.13 0.14,0.16,0.18,0.20), mean=0.052, stddev=0.0454], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.006,0.05,0.06 0.06,0.07,0.08,0.09), mean=0.0236, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.003,0.004,0.01,0.05,0.09 0.15,0.21,0.27,0.50), mean=0.0346, stddev=0.0598], bias-{mean,stddev}=6.567e-06,0.0001696, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.64e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-0.92,-0.51,-0.39 -0.22,-0.10,0.05,0.44,1.4 2.6,3.7,4.0,9.5), mean=0.395, stddev=1.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.6,-1.2,-0.97 -0.55,-0.17,0.30,0.89,1.1 1.4,1.7,1.8,2.1), mean=0.311, stddev=0.696]
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.0009049, max-change=0.75, linear-params-rms=0.001152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.01 0.01,0.02,0.03,0.04,0.05 0.06,0.07,0.07,0.08), mean=0.0336, stddev=0.0153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0006,0.0009 0.001,0.002,0.004,0.02,0.04 0.04,0.05,0.06,0.08), mean=0.0118, stddev=0.0141], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.003,0.008,0.03,0.06 0.09,0.12,0.14,0.17), mean=0.0204, stddev=0.0307], bias-{mean,stddev}=1.069e-05,0.00026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.003,0.003,0.003 0.004,0.004,0.006,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0074, stddev=0.00364], oderiv-count=12096
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.0009049, max-change=0.75, linear-params-rms=0.001233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.02,0.02,0.04,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0406, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.007,0.02,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0168, stddev=0.0102], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.006,0.008,0.02,0.05,0.07 0.10,0.13,0.14,0.19), mean=0.03, stddev=0.0324], bias-{mean,stddev}=-6.61e-07,0.0001691, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.001,0.003 0.004,0.005,0.007,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00767, stddev=0.00377], oderiv-count=20400
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.0009049, max-change=0.75, linear-params-rms=0.00158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.004,0.01,0.03,0.08,0.10 0.11,0.12,0.13,0.14), mean=0.0434, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.002,0.002,0.003 0.005,0.008,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.0216, stddev=0.0132], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0002,0.0004,0.001 0.002,0.004,0.02,0.06,0.10 0.14,0.17,0.18,0.21), mean=0.0351, stddev=0.0443], bias-{mean,stddev}=9.685e-06,0.0001548, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.23e+03, self-repaired-proportion=0.0924805, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.0,-5.8,-4.7,-2.5 -1.5,-0.41,0.07,0.91,1.9 3.1,3.9,4.6,5.3), mean=0.13, stddev=1.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.1,-1.0,-0.75 -0.44,-0.17,0.42,0.99,1.2 1.5,2.0,2.2,4.4), mean=0.406, stddev=0.739]
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=9.049e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.001845, linear-params-row-norms=[ 0.04 0.04 0.003 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,1e-05,2e-05,8e-05 0.0002,0.0004,0.002,0.004,0.005 0.006,0.009,0.01,0.01), mean=0.00224, stddev=0.00228], linear-params-singular-values=[ 0.05 0.004 1e-07 ], bias-{mean,stddev}=9.313e-09,0.0003048, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3

LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.583706 tdnn2.affine:1.1023 tdnn3.affine:0.588803 tdnn4.affine:0.704992 tdnn5.affine:0.904636 output.affine:0.0511411 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.1135 tdnn2.affine:34.6189 tdnn3.affine:24.163 tdnn4.affine:25.737 tdnn5.affine:23.1725 output.affine:1.13911 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0242796 tdnn2.affine:0.0320842 tdnn3.affine:0.0244411 tdnn4.affine:0.0274685 tdnn5.affine:0.0391604 output.affine:0.0453176 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Sat Nov 28 18:28:44 EST 2020, elapsed time 0 seconds
